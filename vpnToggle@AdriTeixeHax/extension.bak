// extension.js
import GObject from 'gi://GObject';
import Gio from 'gi://Gio';
import GLib from 'gi://GLib';

import * as Main from 'resource:///org/gnome/shell/ui/main.js';
import {QuickToggle, SystemIndicator} from 'resource:///org/gnome/shell/ui/quickSettings.js';

const VPNToggle = GObject.registerClass(
class VPNToggle extends QuickToggle {
    _init() {
        super._init({
            title: 'VPN Toggle',
            iconName: 'network-vpn-symbolic',
            toggleMode: true,
        });
        
        this._consoleProcess = null;
        this.connect('clicked', this._onToggle.bind(this));
        
        // Set initial state
        this.checked = false;
    }

    _onToggle() {
        if (this.checked) {
            this._openConsole();
        } else {
            this._closeConsole();
        }
    }

    _openConsole() {
        if (this._consoleProcess) {
            // Console is already running
            return;
        }

        try {
            // Try to launch gnome-terminal first, fallback to other terminals
            const terminals = ['kgx', 'gnome-terminal', 'konsole', 'xterm', 'terminator'];
            let launched = false;

            for (const terminal of terminals) {
                try {
                    const [success, pid] = GLib.spawn_async(
                        null, // working directory
                        [terminal], // command
                        null, // environment
                        GLib.SpawnFlags.SEARCH_PATH | GLib.SpawnFlags.DO_NOT_REAP_CHILD,
                        null // child setup
                    );

                    if (success) {
                        this._consoleProcess = pid;
                        
                        // Watch for process termination
                        GLib.child_watch_add(GLib.PRIORITY_DEFAULT, pid, () => {
                            this._consoleProcess = null;
                            this.checked = false;
                        });

                        launched = true;
                        break;
                    }
                } catch (e) {
                    // Try next terminal
                    continue;
                }
            }

            if (!launched) {
                // Fallback: try to open terminal through desktop file
                const appInfo = Gio.AppInfo.get_default_for_type('application/x-terminal-emulator', false);
                if (appInfo) {
                    appInfo.launch([], null);
                    // Since we can't track this process easily, just assume it worked
                    this._consoleProcess = -1; // Use -1 as a marker for untracked process
                } else {
                    Main.notify('Console Toggle', 'No terminal application found');
                    this.checked = false;
                }
            }
        } catch (e) {
            Main.notify('Console Toggle', `Failed to open console: ${e.message}`);
            this.checked = false;
        }
    }

    _closeConsole() {
        if (this._consoleProcess && this._consoleProcess > 0) {
            try {
                // Send SIGTERM to gracefully close the terminal
                GLib.spawn_command_line_sync(`kill ${this._consoleProcess}`);
            } catch (e) {
                // If graceful close fails, force kill
                try {
                    GLib.spawn_command_line_sync(`kill -9 ${this._consoleProcess}`);
                } catch (e2) {
                    // Process might have already terminated
                }
            }
        }
        
        this._consoleProcess = null;
    }

    destroy() {
        this._closeConsole();
        super.destroy();
    }
});

const ConsoleIndicator = GObject.registerClass(
class ConsoleIndicator extends SystemIndicator {
    _init() {
        super._init();

        this._indicator = this._addIndicator();
        this._indicator.iconName = 'utilities-terminal-symbolic';
        this._indicator.visible = false; // Hide the panel indicator

        // Create the toggle
        this.quickSettingsItems.push(new VPNToggle());
    }
});

export default class VPNToggleExtension {
    constructor() {
        this._indicator = null;
    }

    enable() {
        this._indicator = new ConsoleIndicator();
        Main.panel.statusArea.quickSettings.addExternalIndicator(this._indicator);
    }

    disable() {
        if (this._indicator) {
            this._indicator.quickSettingsItems.forEach(item => item.destroy());
            this._indicator.destroy();
            this._indicator = null;
        }
    }
}
